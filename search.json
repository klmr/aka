[{"path":"http://klmr.me/aka/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 aka authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://klmr.me/aka/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Konrad Rudolph. Maintainer, author.","code":""},{"path":"http://klmr.me/aka/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rudolph K (2024). aka: Define Aliases R Expressions. R package version 0.1.0, https://github.com/klmr/aka, https://klmr./aka/.","code":"@Manual{,   title = {aka: Define Aliases for R Expressions},   author = {Konrad Rudolph},   year = {2024},   note = {R package version 0.1.0, https://github.com/klmr/aka},   url = {https://klmr.me/aka/}, }"},{"path":"http://klmr.me/aka/index.html","id":"aka-","dir":"","previous_headings":"","what":"Define Aliases for R Expressions","title":"Define Aliases for R Expressions","text":"aka::alias() allows creating aliases R names arbitrarily complex R expressions. Accessing alias acts -aliased expression invoked instead, continuously reflects current value expression: updates original expression reflected alias; updates alias automatically reflected original expression.","code":""},{"path":"http://klmr.me/aka/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Define Aliases for R Expressions","text":"aka CRAN; install via: can also install development version aka GitHub:","code":"install.packages('aka') pak::pak('klmr/aka')"},{"path":"http://klmr.me/aka/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Define Aliases for R Expressions","text":"simplest case aliases another name: can see, updates original names reflected alias, updates alias reflected original name. alternative syntax, can use “assignment-like” form: form strictly equivalent alias(ax = x). Furthermore, aliases can created complex expressions: … can even update parts aliased expression modify parts original, underlying objects: However, careful assigning alias object parent environment: seem work: … y found attached parent environment found current scope; however, following create new variable y current scope, leave e$y untouched: prevent : pass env_expr defining alias:","code":"library(aka) x = 'hello' alias(ax = x) ax ## [1] \"hello\" x = 'world' ax ## [1] \"world\" ax = 'goodbye' x ## [1] \"goodbye\" ax %=&% x mercedes %=&% mtcars[grep('^Merc ', rownames(mtcars)), ] mercedes # Set all Mercedes engine types to V-shaped mercedes$vs = 0  mtcars[8 : 14, 'vs', drop = FALSE] e = attach(new.env()) e$y = 'hello'  alias(ay = y) ay ## [1] \"hello\" ay = 'world' e$y ## [1] \"hello\" y ## [1] \"world\" alias(ay = y, expr_env = e)"},{"path":"http://klmr.me/aka/index.html","id":"why","dir":"","previous_headings":"","what":"Why?!","title":"Define Aliases for R Expressions","text":"aka implements approach reactive programming complementary Shiny’s reactive programming API. Superficially, mechanism resembles references C++. However, hood fundamentally different. particular, aka aliases currently implemented active bindings, whereas C++ references direct aliases either replaced actual value compiler converted pointers. package purely provides syntactic sugar active bindings, add functionality manually calling makeActiveBinding() (aliases created aka active bindings). also superficially similar pointr package. Unlike latter, API aka uses proper R expressions instead stringly typed, usage implementation conceptually straightforward idiomatic. allow programming language, aka supports bquote()’s macro interpolation syntax rather requiring string manipulation. also allows explicitly controlling evaluating defining environments alias. Truth told, now yet identified compelling use-case package; mainly exists explore concepts, provide playground. Another purpose act tutorial implementation simple powerful non-standard evaluation API. ’ve found interesting use-case, please reach : genuinely curious!","code":""},{"path":"http://klmr.me/aka/reference/alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an alias for an expression — alias","title":"Create an alias for an expression — alias","text":"alias(name = expr) creates alias expr named name. Subsequently, name can (mostly) used interchangeably expr. name %&=% expr alias(name = expr).","code":""},{"path":"http://klmr.me/aka/reference/alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an alias for an expression — alias","text":"","code":"alias(name = expr, expr_env = parent.frame(), alias_env = parent.frame())  name %=&% expr"},{"path":"http://klmr.me/aka/reference/alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an alias for an expression — alias","text":"expr_env environment evaluate expression alias_env environment create alias name alias name expr arbitrary R expression aliased name; can contain interpolated expressions; see Details","code":""},{"path":"http://klmr.me/aka/reference/alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an alias for an expression — alias","text":"alias() called side-effect return value.","code":""},{"path":"http://klmr.me/aka/reference/alias.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an alias for an expression — alias","text":"executing alias(name = expr), name can used refer value expr. especially useful expr complex expression used multiple times code. Unlike regular assignment, expr reevaluated every time name evaluated. means value name always stays date, similar “reactive” expression. flip side, also means accessing name can slow evaluating expr time-consuming. expr can contain interpolated expressions using bquote() syntax (including splicing). substituted time defining alias. See Examples. parameters expr_env alias_env used control environments expression evaluated alias created, respectively. Note specifying correct expr_env particularly important assigning alias: expression can evaluated inside parent environment without specify expr_env; however, assignment cause assignee object copied calling environment. See Examples concrete example .","code":""},{"path":"http://klmr.me/aka/reference/alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an alias for an expression — alias","text":"","code":"x = 'hello' alias(ax = x) ax    # prints 'hello' #> [1] \"hello\"  x = 'world' ax    # prints 'world' #> [1] \"world\"  ax = 'goodbye' x     # prints 'goodbye' #> [1] \"goodbye\"  # Aliases can be created for complex expressions: alias(mercedes = mtcars[grepl('^Merc ', rownames(mtcars)), ]) mercedes #>              mpg cyl  disp  hp drat   wt qsec vs am gear carb #> Merc 240D   24.4   4 146.7  62 3.69 3.19 20.0  1  0    4    2 #> Merc 230    22.8   4 140.8  95 3.92 3.15 22.9  1  0    4    2 #> Merc 280    19.2   6 167.6 123 3.92 3.44 18.3  1  0    4    4 #> Merc 280C   17.8   6 167.6 123 3.92 3.44 18.9  1  0    4    4 #> Merc 450SE  16.4   8 275.8 180 3.07 4.07 17.4  0  0    3    3 #> Merc 450SL  17.3   8 275.8 180 3.07 3.73 17.6  0  0    3    3 #> Merc 450SLC 15.2   8 275.8 180 3.07 3.78 18.0  0  0    3    3  mercedes$vs = 0  # set all Mercedes engine types to V-shaped mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  0  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  0  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  0  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  0  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # Aliases can contain interpolated expressions: n = 1 m = 2 alias(s = .(n) + m) s  # prints 3 #> [1] 3  n = 10 m = 10 s  # prints 11 #> [1] 11  alias_expr('s')  # prints `1 + m` #> 1 + m  # Be careful when assigning to an alias to an object in a parent environment:  e = attach(new.env()) e$y = 'hello'  alias(ay = y)  # Works: `y` is found in the parent environment ay  # prints 'hello' #> [1] \"hello\"  # But the following creates a *new variable* `y` in the current environment: ay = 'world' e$y   # prints 'hello', still! #> [1] \"hello\" y     # prints 'world' #> [1] \"world\"  # To prevent this, use `expr_env`: # alias(ay = y, expr_env = e)"},{"path":"http://klmr.me/aka/reference/getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Query alias internals — getters","title":"Query alias internals — getters","text":"alias_expr(alias) returns expression used define alias. alias_env(alias) returns environment aliased expression evaluated.","code":""},{"path":"http://klmr.me/aka/reference/getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query alias internals — getters","text":"","code":"alias_expr(alias, envir = parent.frame())  alias_env(alias, envir = parent.frame())"},{"path":"http://klmr.me/aka/reference/getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query alias internals — getters","text":"alias name alias, string envir environment look alias name (default: calling environment)","code":""},{"path":"http://klmr.me/aka/reference/getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query alias internals — getters","text":"alias_expr(alias) returns unevaluated R expression (name call). alias_env(alias) returns environment.","code":""}]
